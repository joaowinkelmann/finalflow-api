// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario      String       @id @default(uuid())
  nome            String
  email           String       @unique
  senha           String
  nivel_acesso    NivelAcesso
  data_cadastro   DateTime     @default(now()) @db.Timestamptz(3)
  primeiro_acesso Boolean      @default(true)
  avatar          String?
  Aluno           Aluno?
  Professor       Professor?
  Coordenador     Coordenador?
  Alerta          Alerta[]
}

model Curso {
  id_curso String  @id @default(uuid())
  nome     String
  Aluno    Aluno[]
}

model Aluno {
  id_aluno   String       @id @default(uuid())
  matricula  Int
  idusuario  String       @unique
  usuario    Usuario      @relation(fields: [idusuario], references: [id_usuario])
  Orientacao Orientacao[]
  Banca      Banca[]
  Curso      Curso        @relation(fields: [idcurso], references: [id_curso])
  idcurso    String
  Entrega    Entrega[]
}

model Professor {
  id_professor String       @id @default(uuid())
  departamento String
  idusuario    String       @unique
  usuario      Usuario      @relation(fields: [idusuario], references: [id_usuario])
  Orientacao   Orientacao[]
  Banca1       Banca[]      @relation("Professor1")
  Banca2       Banca[]      @relation("Professor2")
}

// O "admin" do sistema. Pode criar e gerenciar os Cursos, Orientações, Cronogramas, e os Usuários em geral.
// Existe apenas um Coordenador no sistema.
model Coordenador {
  id_coordenador String       @id @default(uuid())
  idusuario      String       @unique
  usuario        Usuario      @relation(fields: [idusuario], references: [id_usuario])
  Cronograma     Cronograma[]
}

// Descreve uma orientação para um trabalho de TCC de algum aluno qualquer. Vincula um professor que será o orientador, e também um aluno que será orientado, linkando também as reuniões que ocorrerão durante a orientação.
// Também de certa forma guarda metadados sobre o trabalho.
model Orientacao {
  id_orientacao   String      @id @default(uuid())
  idprofessor     String
  idaluno         String
  idcronograma    String
  data_inicio     DateTime    @db.Timestamptz(3)
  data_fim        DateTime?   @db.Timestamptz(3)
  Professor       Professor   @relation(fields: [idprofessor], references: [id_professor])
  Aluno           Aluno       @relation(fields: [idaluno], references: [id_aluno])
  Reuniao         Reuniao[]
  Banca           Banca? // uma orientação tem somente uma banca
  Avaliacao       Avaliacao[]
  Cronograma      Cronograma  @relation(fields: [idcronograma], references: [id_cronograma])
  titulo_trabalho String
  Entrega         Entrega[]
}

// Descreve um cronograma de atividades para um semestre letivo, definidos através de Prazos.
// Cada cronograma é vinculado a um Coordenador.
model Cronograma {
  id_cronograma String       @id @default(uuid())
  idcoordenador String
  descricao     String
  data_inicio   DateTime     @db.Timestamptz(3)
  data_fim      DateTime     @db.Timestamptz(3)
  Coordenador   Coordenador  @relation(fields: [idcoordenador], references: [id_coordenador])
  Banca         Banca[]
  Prazo         Prazo[]
  Orientacao    Orientacao[]
}

// Vincula os dois Professores que compõem a Banca de um Aluno durante a Orientação de um trabalho de TCC.
model Banca {
  id_banca     String      @id @default(uuid())
  idcronograma String
  idaluno      String
  idprofessor1 String
  idprofessor2 String
  Cronograma   Cronograma  @relation(fields: [idcronograma], references: [id_cronograma])
  Aluno        Aluno       @relation(fields: [idaluno], references: [id_aluno])
  Professor1   Professor   @relation("Professor1", fields: [idprofessor1], references: [id_professor])
  Professor2   Professor   @relation("Professor2", fields: [idprofessor2], references: [id_professor])
  Avaliacao    Avaliacao[]

  idorientacao String     @unique // uma banca tem somente uma orientação
  Orientacao   Orientacao @relation(fields: [idorientacao], references: [id_orientacao])

  @@unique([idprofessor1, idprofessor2, idcronograma])
}

// Guarda dados sobre alguma avaliação feita por um professor sobre um trabalho de TCC de um aluno. Também linka avaliações feitas para entregas de propostas, por exemplo.
model Avaliacao {
  id_avaliacao   String        @id @default(uuid())
  idbanca        String? // nem toda avaliação vai ter uma banca
  idorientacao   String? // nem toda avaliacao vai ter uma orientacao
  identrega      String? // talvez nem toda avaliacao vai ter uma entrega
  avaliacao_tipo TipoAvaliacao
  data_avaliacao DateTime      @db.Timestamptz(3)
  criterio       String
  nota           Float
  comentario     String?
  Banca          Banca?         @relation(fields: [idbanca], references: [id_banca])
  Orientacao     Orientacao?    @relation(fields: [idorientacao], references: [id_orientacao])
  Entrega        Entrega?      @relation(fields: [identrega], references: [id_entrega])

  @@index([identrega])
}

// Reuniões que ocorrem durante a Orientação de um aluno. Permite também o upload de documentos.
model Reuniao {
  id_reuniao   String      @id @default(uuid())
  idorientacao String
  data_reuniao DateTime    @db.Timestamptz(3)
  descricao    String
  Documento    Documento[]
  Orientacao   Orientacao  @relation(fields: [idorientacao], references: [id_orientacao])
}

// Guarda indivudalmente os documentos que são enviados para alguma Reunião.
model Documento {
  id_documento String  @id @default(uuid())
  nome         String
  arquivo      String
  idreuniao    String
  Reuniao      Reuniao @relation(fields: [idreuniao], references: [id_reuniao])
}

// Define os Prazos de um Cronograma para relacionar a Entregas do aluno e retorno das Avaliações para os alunos pelos Professores.
model Prazo {
  id_prazo     String     @id @default(uuid())
  dscprazo     String?    // descrição do prazo
  idcronograma String
  prazo_tipo   TipoPrazo
  data_entrega DateTime   @db.Timestamptz(3)
  data_retorno DateTime   @db.Timestamptz(3) // estimativa de até quando será feita a avaliação pelo professor
  Cronograma   Cronograma @relation(fields: [idcronograma], references: [id_cronograma])
  Alerta       Alerta[]
  Entrega      Entrega[]

  @@unique([idcronograma, prazo_tipo])
}

// Entrega de um trabalho de TCC por um aluno. Pode ser a proposta, a reelaboração da proposta, o TC, ou a reelaboração do TC.
model Entrega {
  id_entrega   String      @id @default(uuid())
  prazo_tipo   TipoPrazo
  data_envio   DateTime    @db.Timestamptz(3)
  arquivo      String
  idaluno      String
  aluno        Aluno       @relation(fields: [idaluno], references: [id_aluno])
  idorientacao String
  orientacao   Orientacao  @relation(fields: [idorientacao], references: [id_orientacao])
  idprazo      String
  prazo        Prazo       @relation(fields: [idprazo], references: [id_prazo])
  Avaliacao    Avaliacao[]

  @@unique([idaluno, prazo_tipo])
}

// Guarda as mensagens que serão enviadas para os usuários.
// Pode estar vinculado a um Prazo de algum Cronograma
// Pode ser simplemsmente uma mensagem genérica a ser enviada no sistema.
model Alerta {
  id_alerta  String   @id @default(uuid())
  idprazo    String?
  idusuario  String
  assunto    String
  mensagem   String
  data_envio DateTime @db.Timestamptz(3) // data de quando será enviado o email
  ja_enviado Boolean  @default(false)
  Prazo      Prazo?   @relation(fields: [idprazo], references: [id_prazo])
  Usuario    Usuario  @relation(fields: [idusuario], references: [id_usuario])
}

// Enums
enum NivelAcesso {
  coordenador
  professor
  aluno
}

enum TipoAvaliacao {
  Proposta
  ReelaboracaoProposta
  TC
  ReelaboracaoTC
}

enum TipoPrazo {
  EntregaProposta
  ReelaboracaoProposta
  EntregaTC
  ReelaboracaoTC
}
